You are an expert Go developer and code generation assistant.
Your task is to generate production-quality Go CRUD code and API handlers for a model named `{model}`.
You will output the code in four sections: Model, Data, API Handlers, and Route Registration.

Each section should begin with a marker indicating the file path using the format:
==== {local_repo_dir}/<target_file_path>/n<code>

---

### âœ… Requirements:

- Follow idiomatic Go style.
- Add comments to all exported functions.
- Use Gorilla Mux for routing.
- The model struct should include:
  - JSON and DB tags
  - Swagger annotations
  - go-playground validator tags

---

### ðŸ“¦ Sections to Generate:

---

**1. Model Definition**

- File: `model/{model}.go`
- Marker: `==== {local_repo_dir}/model/{model}.go/n`
- Define a struct named `{model}` in TitleCase.
- Include the following fields with appropriate types and tags:
  {fields}

---

**2. Data Layer**

- File: `data/{model}.go`
- Marker: `==== {local_repo_dir}/data/{model}.go/n`

Generate full Go source code that implements the data access layer for the `{model}` model using `database/sql`.

You must write fully implemented CRUD functions (no TODOs, no placeholders). Each function should:
- Use `db.Query`, `db.QueryRow`, or `db.Exec`
- Include actual SQL queries as constants (e.g., `var sqlSelectProduct = "SELECT ..."`).
- Map results to the `model.{model}` struct
- Use proper `Scan`, error handling, and `defer rows.Close()`

If the model has related data (e.g., agents in `Department`), include inner helper functions and use joins or subqueries as needed.

Use the existing DB connection method `CreateDb()` from `connect.go`.

Hereâ€™s a structure to follow:

```go
var sqlSelectProduct = "SELECT id, name, price FROM product WHERE isdeleted=0"

```go
var sqlSelectProduct = "SELECT id, name, price FROM product WHERE isdeleted=0"

func GetAllProduct(db *sql.DB) ([]model.Product, error) {{
    var products []model.Product
    rows, err := db.Query(sqlSelectProduct)
    if err != nil {{
        return products, err
    }}
    defer rows.Close()

    for rows.Next() {{
        var p model.Product
        err := rows.Scan(&p.ID, &p.Name, &p.Price)
        if err != nil {{
            return products, err
        }}
        products = append(products, p)
    }}
    return products, nil
}}


---

**3. API Handlers**

- File: `http/api/{model}.go`
- Marker: `==== {local_repo_dir}/http/api/{model}.go/n`
- Update the existing API handler file. If it already exists, here is its current content:
{existing_api}

---

**4. Route Registration**

- File: `http/server.go`
- Marker: `==== {local_repo_dir}/http/server.go/n`
- Register CRUD endpoints using Gorilla Mux.
- Endpoints:
  - GET /{model}s
  - GET /{model}s/{{id}}
  - POST /{model}s
  - PUT /{model}s
  - DELETE /{model}s/{{id}}
- Update the existing server.go file. If it already exists, here is its current content:
{existing_routes}
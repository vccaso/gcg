📘 OrishAI Workflow Specification

This document defines the syntax, structure, and rules for authoring workflow files in OrishAI, a modular AI agent orchestration framework. Workflows are written in YAML and describe multi-step agent executions.

🧱 Top-Level Structure

name: my_workflow_name
version: 1.0
description: Optional description of what this workflow does

vars:
  var_name: value

steps:
  - name: step_identifier
    type: category_or_group
    agent: AgentClassName
    input:
      key: value | ${var_name} | step.output_reference

🔹 Sections

name

Required. A unique identifier for the workflow.

version

Optional. The workflow version. Can be used for tracking or UI display.

description

Optional. Human-readable description of the workflow's purpose.

vars

Optional. Defines variables that can be reused throughout steps using ${var_name} syntax.

vars:
  local_repo: ./workspace/codebase
  collection: docs_vector

steps

Required. A list of actions to perform using agents. Each step must contain:

name: Unique step identifier.

type: A category (e.g., git, rag, llm, utils).

agent: The Python class that should be instantiated.

input: A dictionary of parameters passed to the agent.

🔁 Variable Substitution

You can use any variable from vars like this:

input:
  repo_path: ${local_repo}

🔗 Step Output Referencing

You can pass data between steps using dot-notation:

input:
  content: previous_step.output_key

This will pull the value from a prior step’s return dict.

⚠ Reserved Keywords

name, type, agent, and input are required in each step.

Avoid redefining these inside your vars section.

🧠 Special Input Keys

Some agents support special input keys:

content_from: Used in SaveToFileAgent to reference content from a previous step.

✅ Execution Order

Steps are executed in the order they appear. Each step can optionally return values used by later steps.

🛠 Example

name: generate_crud
version: 1.0
description: Generate and save CRUD code based on project structure

vars:
  repo_path: ./workspace/api
  output_file: ./workspace/generated.go

steps:
  - name: extract
    type: git
    agent: RequirementsExtractorAgent
    input:
      repo_path: ${repo_path}
      key: requirements

  - name: write_req
    type: utils
    agent: SaveToFileAgent
    input:
      content_from: extract.requirements
      file_path: ${output_file}

📌 Best Practices

Keep step names short and meaningful.

Use vars for shared values (paths, model names).

Use output references when chaining agents.

Use versioning to evolve workflows without breaking compatibility.

📂 File Format

File extension should be .yaml or .yml

Stored in the directory specified by the workflow_path in config.yaml

For questions or advanced use cases, contact the maintainers or refer to the agent implementation files.